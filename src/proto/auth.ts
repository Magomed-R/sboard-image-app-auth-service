/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.20.3
 * source: auth.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace auth {
    export class LoginDto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): LoginDto {
            const message = new LoginDto({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginDto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginDto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): LoginDto {
            return LoginDto.deserialize(bytes);
        }
    }
    export class SignupDto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            email?: string;
            password?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
                if ("password" in data && data.password != undefined) {
                    this.password = data.password;
                }
            }
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get password() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set password(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            email?: string;
            password?: string;
        }): SignupDto {
            const message = new SignupDto({});
            if (data.email != null) {
                message.email = data.email;
            }
            if (data.password != null) {
                message.password = data.password;
            }
            return message;
        }
        toObject() {
            const data: {
                email?: string;
                password?: string;
            } = {};
            if (this.email != null) {
                data.email = this.email;
            }
            if (this.password != null) {
                data.password = this.password;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.email.length)
                writer.writeString(1, this.email);
            if (this.password.length)
                writer.writeString(2, this.password);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): SignupDto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new SignupDto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.email = reader.readString();
                        break;
                    case 2:
                        message.password = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): SignupDto {
            return SignupDto.deserialize(bytes);
        }
    }
    export class VerifyDto extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            accessToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("accessToken" in data && data.accessToken != undefined) {
                    this.accessToken = data.accessToken;
                }
            }
        }
        get accessToken() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set accessToken(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            accessToken?: string;
        }): VerifyDto {
            const message = new VerifyDto({});
            if (data.accessToken != null) {
                message.accessToken = data.accessToken;
            }
            return message;
        }
        toObject() {
            const data: {
                accessToken?: string;
            } = {};
            if (this.accessToken != null) {
                data.accessToken = this.accessToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.accessToken.length)
                writer.writeString(1, this.accessToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyDto {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyDto();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.accessToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyDto {
            return VerifyDto.deserialize(bytes);
        }
    }
    export class UserAndToken extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
            accessToken?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
                if ("accessToken" in data && data.accessToken != undefined) {
                    this.accessToken = data.accessToken;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get accessToken() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set accessToken(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
            accessToken?: string;
        }): UserAndToken {
            const message = new UserAndToken({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            if (data.accessToken != null) {
                message.accessToken = data.accessToken;
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
                accessToken?: string;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            if (this.accessToken != null) {
                data.accessToken = this.accessToken;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (this.accessToken.length)
                writer.writeString(2, this.accessToken);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserAndToken {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserAndToken();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    case 2:
                        message.accessToken = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): UserAndToken {
            return UserAndToken.deserialize(bytes);
        }
    }
    export class User extends pb_1.Message {
        #one_of_decls: number[][] = [[1]];
        constructor(data?: any[] | ({
            email?: string;
        } & (({
            id?: string;
        })))) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("email" in data && data.email != undefined) {
                    this.email = data.email;
                }
            }
        }
        get id() {
            return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
        }
        set id(value: string) {
            pb_1.Message.setOneofField(this, 1, this.#one_of_decls[0], value);
        }
        get has_id() {
            return pb_1.Message.getField(this, 1) != null;
        }
        get email() {
            return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
        }
        set email(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get _id() {
            const cases: {
                [index: number]: "none" | "id";
            } = {
                0: "none",
                1: "id"
            };
            return cases[pb_1.Message.computeOneofCase(this, [1])];
        }
        static fromObject(data: {
            id?: string;
            email?: string;
        }): User {
            const message = new User({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.email != null) {
                message.email = data.email;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                email?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.email != null) {
                data.email = this.email;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_id)
                writer.writeString(1, this.id);
            if (this.email.length)
                writer.writeString(2, this.email);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.email = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): User {
            return User.deserialize(bytes);
        }
    }
    export class VerifyResponse extends pb_1.Message {
        #one_of_decls: number[][] = [];
        constructor(data?: any[] | {
            user?: User;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("user" in data && data.user != undefined) {
                    this.user = data.user;
                }
            }
        }
        get user() {
            return pb_1.Message.getWrapperField(this, User, 1) as User;
        }
        set user(value: User) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get has_user() {
            return pb_1.Message.getField(this, 1) != null;
        }
        static fromObject(data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        }): VerifyResponse {
            const message = new VerifyResponse({});
            if (data.user != null) {
                message.user = User.fromObject(data.user);
            }
            return message;
        }
        toObject() {
            const data: {
                user?: ReturnType<typeof User.prototype.toObject>;
            } = {};
            if (this.user != null) {
                data.user = this.user.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.has_user)
                writer.writeMessage(1, this.user, () => this.user.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): VerifyResponse {
            return VerifyResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedAuthServiceService {
        static definition = {
            Login: {
                path: "/auth.AuthService/Login",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: LoginDto) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => LoginDto.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UserAndToken) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UserAndToken.deserialize(new Uint8Array(bytes))
            },
            Signup: {
                path: "/auth.AuthService/Signup",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: SignupDto) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => SignupDto.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: UserAndToken) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => UserAndToken.deserialize(new Uint8Array(bytes))
            },
            Verify: {
                path: "/auth.AuthService/Verify",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: VerifyDto) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => VerifyDto.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: VerifyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => VerifyResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Login(call: grpc_1.ServerUnaryCall<LoginDto, UserAndToken>, callback: grpc_1.sendUnaryData<UserAndToken>): void;
        abstract Signup(call: grpc_1.ServerUnaryCall<SignupDto, UserAndToken>, callback: grpc_1.sendUnaryData<UserAndToken>): void;
        abstract Verify(call: grpc_1.ServerUnaryCall<VerifyDto, VerifyResponse>, callback: grpc_1.sendUnaryData<VerifyResponse>): void;
    }
    export class AuthServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedAuthServiceService.definition, "AuthService", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Login: GrpcUnaryServiceInterface<LoginDto, UserAndToken> = (message: LoginDto, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserAndToken>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserAndToken>, callback?: grpc_1.requestCallback<UserAndToken>): grpc_1.ClientUnaryCall => {
            return super.Login(message, metadata, options, callback);
        };
        Signup: GrpcUnaryServiceInterface<SignupDto, UserAndToken> = (message: SignupDto, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserAndToken>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserAndToken>, callback?: grpc_1.requestCallback<UserAndToken>): grpc_1.ClientUnaryCall => {
            return super.Signup(message, metadata, options, callback);
        };
        Verify: GrpcUnaryServiceInterface<VerifyDto, VerifyResponse> = (message: VerifyDto, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyResponse>, callback?: grpc_1.requestCallback<VerifyResponse>): grpc_1.ClientUnaryCall => {
            return super.Verify(message, metadata, options, callback);
        };
    }
}
